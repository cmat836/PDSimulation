               // Loop through all the messages in the system
                foreach (Actor actor in actorsList)
                {
                    foreach (Message m in actor.outbox.ToList())
                    {
                        if (m.answered)
                        {
                            // If the message had an answer assumed, and then has been answered properly
                            if (m.answerAssumed)
                            {
                                // Check if the assumption was not correct
                                if (doesEventOccur(m.sender.assumptionAccuracy))
                                {
                                    // Add more time the the subsystem based on how much of an effect bad assumptions have
                                    double addedTime = m.sender.assumptionEffect * m.daysSinceSent;
                                    m.sender.subSystem.hoursTillCompletion += addedTime;
                                }
                            }

                            // Delete the message
                            m.sender.outbox.Remove(m);
                            m.recipient.inbox.Remove(m);
                        }

                        // increment the number of days the message has been out for
                        m.daysSinceSent++;
                    }
                    actor.resetDay();
                }



				 // Go through all the actors
                foreach (Actor actor in actorsList)
                {
                    double messageTimeLeft = actor.totalMessageResponseTime;
                    foreach (Message message in actor.subSystem.inbox)
                    {
                        // If enough time left, respond to message and subtract time
                        if (messageTimeLeft > (message.messageResponseTime / actor.messageResponseRate) && !message.answered)
                        {
                            message.answered = true;
                            messageTimeLeft -= (message.messageResponseTime / actor.messageResponseRate);
                            actor.workingHoursLeftInDay -= (message.messageResponseTime / actor.messageResponseRate);
                        }
                    }
                }

                // CHECK IF ACTORS MAKE ASSUMPTIONS BASED ON UNANSWERED MESSAGES

                // Go through all the actors 
                foreach (Actor actor in actorsList)
                {
                    // If the actors subsystem is blocked
                    if (actor.subSystem.isBlocked)
                    {
                        foreach (Message m in actor.subSystem.inbox)
                        {
                            // Check if the actor makes an assumption
                            if (doesEventOccur(actor.assumptionChance))
                            {
                                m.answerAssumed = true;
                            }
                        }
                    }
                }

                // CHECK IS ACTORS MAKE ASSUMPTIONS BASED ON BAD ASSUMPTIONS

                foreach (Actor actor in actorsList)
                {
                    /*
                     * Probability of rework occuring during a day = 
                     * Probability of an assumption happening x The effect of the assumption
                     * 
                     * If an assumption occurs, add one day of work
                     */
                    double pRework = actor.assumptionChance * actor.assumptionEffect;
                    if (doesEventOccur(pRework))
                    {
                        actor.subSystem.hoursTillCompletion += 8;
                    }
                }


                // SUBSYSTEMS

                bool everythingIsDone = true;

                // Go through all the subsystems
                foreach (KeyValuePair<String, SubSystem> subsystem in subSystemList)
                {
                    // Check if the subsystem has been unblocked
                    subsystem.Value.checkStatus();
                    // Go through all of the dependencies of the subsystem
                    foreach (KeyValuePair<SubSystem, double> dependency in subsystem.Value.subSystemDependencies)
                    {
                        // If the dependency is required AND it has not been completed, block the subsystem
                        if (dependency.Value > dependencyThreshold && dependency.Key.hoursTillCompletion >= 0)
                        {
                            subsystem.Value.isBlocked = true;
                        }
                    }

                    // Go through actors
                    foreach (Actor actor in actorsList)
                    {
                        if (!sequential)
                        {
                            // If actor can work on the subsystem, work on it
                            if (actor.subSystem == subsystem.Value && !subsystem.Value.isBlocked)
                            {
                                subsystem.Value.hoursTillCompletion -= actor.workingHoursLeftInDay;
                                actor.workingHoursLeftInDay = 0;
                            }
                        } else
                        {
                            if (actor.subSystem.hoursTillCompletion < 0)
                            {
                                continue;
                            }
                            actor.subSystem.hoursTillCompletion -= actor.workingHoursLeftInDay;
                            actor.workingHoursLeftInDay = 0;
                            break;
                        }

                    }

                    // If time still left, we're obviously not done
                    if (subsystem.Value.hoursTillCompletion  > 0)
                    {
                        everythingIsDone = false;
                    }
                }

                // CHECK IF WE'RE DONE

                if (everythingIsDone)
                {
                    finished = true;
                    break;
                }

                // SENDING MESSAGES

                // Go through all the actors 
                foreach (Actor actor in actorsList)
                {
                    // Go through his subsystems dependency's
                    foreach (KeyValuePair<SubSystem, double> kvp in actor.subSystem.subSystemDependencies)
                    {
                        // Chance to generate a message, calculated by weighting the dependency of the actors subsystem on the other subsystem  by the percentage of time left in the task
                        // I.e. if there is alot of time left in the task the chance for a message to occur will be higher (closer to the DSM) than if there is little time left
                        double messagechance = kvp.Value * (actor.subSystem.hoursTillCompletion / actor.subSystem.totalTimeNeeded);
                        if (doesEventOccur(messagechance) && !actor.subSystem.isBlocked)
                        {
                            // if a message is sent, add it to the actor who sent it and the subsystem that will receive it, and block the subsystem that sent the message
                            Message m = new Message(actor, kvp.Key, 1);
                            actor.outbox.Add(m);
                            kvp.Key.inbox.Add(m);
                            actor.subSystem.isBlocked = true;
                        }
                    }
                }
                